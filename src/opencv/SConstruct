#! /usr/bin/env python

import os

cc = 'gcc-4.7'
cxx = 'g++-4.7'
if ARGUMENTS.get('debug', 0):
    cc = 'clang'
    cxx = 'clang++'

cc = os.environ.get('CC', cc)
cxx = os.environ.get('CXX', cxx)

cuda_root = os.environ.get('CUDA_ROOT', '/usr/local/cuda')

ccflags = ['-Wall', '-Wextra', '-Werror']
ccflags.append('-Wno-unused-function')
ccflags.append('-std=c++11')

if ARGUMENTS.get('debug', 0):
    ccflags.extend(['-ggdb', '-O0'])
else:
    ccflags.append('-O3')

if ARGUMENTS.get('omp', 0):
    ccflags.append('-fopenmp')

if cc == 'clang' or cxx == 'clang++':
    ccflags.append('-fcolor-diagnostics')

cpath = ['/usr/local/include', '../include']

libpath = []

libs = ['opencv_core', 'opencv_gpu', 'opencv_stitching', 'gomp']


env = Environment(CC = cc, CXX = cxx)
env.Append(CCFLAGS = ccflags)
env.Append(CPPPATH = cpath)
env.Append(LIBPATH = libpath)
env.Append(LIBS = libs)

sources = ['io.cpp', 'stitcher.cpp', 'matchers.cpp', 'motion_estimators.cpp']

env.Program('stitcher', ['main.cpp', sources])

