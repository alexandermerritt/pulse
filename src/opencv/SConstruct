#! /usr/bin/env python
# scons clang=1 -jN [debug=1]

import os

cc = 'gcc'
cxx = 'g++'

# cmd args > env values
cc = os.environ.get('CC', cc)
cxx = os.environ.get('CXX', cxx)
if ARGUMENTS.get('clang', 0):
    cc = 'clang'
    cxx = 'clang++'

ccflags = ['-std=c++11']
#ccflags.extend(['-Wall', '-Wextra', '-Werror'])
ccflags.extend(['-Wall', '-Wextra'])
ccflags.append('-Wno-unused-function')
ccflags.append('-Wno-unused-parameter')

libs = []

if ARGUMENTS.get('ocl', 0):
    libs.append('amdocl64')
    libs.append('ncurses') # this is a dependency apparently

if ARGUMENTS.get('debug', 0):
    ccflags.extend(['-ggdb', '-O0'])
else:
    ccflags.append('-O3')

#if ARGUMENTS.get('omp', 0):
#    ccflags.append('-fopenmp')
#    libs.append('gomp')

if cc == 'clang' or cxx == 'clang++':
    ccflags.append('-fcolor-diagnostics')

cpath = ['/usr/local/include', '../include']
cpath.append('/usr/include/jsoncpp')
#cpath.append('/usr/include/ImageMagick')

libpath = []

# libs acquired from 'pkg-config --libs opencv'
libs.extend(['-lopencv_calib3d',
    'opencv_contrib',
    'opencv_core',
    'opencv_features2d',
    'opencv_flann',
    'opencv_gpu',
    'opencv_highgui',
    'opencv_imgproc',
    'opencv_legacy',
    'opencv_ml',
    'opencv_objdetect',
    #'opencv_ocl',
    'opencv_photo',
    'opencv_stitching',
    'opencv_superres',
    'opencv_ts',
    'opencv_video',
    'opencv_videostab',
    'protobuf', 'pthread' # req'd by protobuf
    ])
libs.extend(['jsoncpp', 'memcached', 'uuid'])
#libs.append('Magick++')

protonames = ['Objects']
protogen = [fname + '.pb.cc' for fname in protonames]
protosrc = [fname + '.proto' for fname in protonames]

protobuild = Builder(action = 'protoc --cpp_out=. $SOURCE')

env = Environment(CC = cc, CXX = cxx, BUILDERS={'Proto' : protobuild})
env.Proto(protosrc)
env.Append(CCFLAGS = ccflags)
env.Append(CPPPATH = cpath)
env.Append(LIBPATH = libpath)
env.Append(LIBS = libs)

sources = ['StormFuncs.cpp', 'StormWrapper.cpp',
            'Config.cpp', 'BFSBolt.cc', 'MontageBolt.cc']
sources.extend(protogen)
#env.Program('stormfuncs', sources)
env.SharedLibrary('stormfuncs', sources)

loadsources = ['load_egonet.cc', 'Config.cpp']
loadsources.extend(protogen)
env.Program('load_egonet', loadsources)

#env.Program('testimage', ['test-image.cpp'])

# OLD STUFF
#sources = ['io.cpp', 'stitcher.cpp', 'matchers.cpp', 'motion_estimators.cpp']
#sources.extend(['memcached.cpp'])

#env.Program('stitcher', ['main.cpp', sources])

#env.Program('dicer', ['dicer-app.cpp', sources])
#env.Program('sizes', ['show-sizes.cpp', sources])

