#! /usr/bin/env python

import os

cc = 'gcc'
cxx = 'g++'

# cmd args > env values
cc = os.environ.get('CC', cc)
cxx = os.environ.get('CXX', cxx)
if ARGUMENTS.get('clang', 0):
    cc = 'clang'
    cxx = 'clang++'

ccflags = ['-std=c++11']
ccflags.extend(['-Wall', '-Wextra', '-Werror'])
ccflags.append('-Wno-unused-function')
ccflags.append('-Wno-unused-parameter')

libs = []

if ARGUMENTS.get('debug', 0):
    ccflags.extend(['-ggdb', '-O0'])
else:
    ccflags.append('-O3')

if ARGUMENTS.get('omp', 0):
    ccflags.append('-fopenmp')
    libs.append('gomp')

if cc == 'clang' or cxx == 'clang++':
    ccflags.append('-fcolor-diagnostics')

cpath = ['/usr/local/include', '../include']

libpath = []

if ARGUMENTS.get('ocl', 0):
    libs.append('amdocl64')

# libs acquired from 'pkg-config --libs opencv'
libs.extend(['opencv_calib3d',
        'opencv_contrib',
        'opencv_core',
        'opencv_features2d',
        'opencv_flann',
        'opencv_gpu',
        'opencv_highgui',
        'opencv_imgproc',
        'opencv_legacy',
        'opencv_ml',
        'opencv_nonfree',
        'opencv_objdetect',
        'opencv_ocl',
        'opencv_photo',
        'opencv_stitching',
        'opencv_superres',
        'opencv_ts',
        'opencv_video',
        'opencv_videostab'])
libs.extend(['tbb', 'rt', 'pthread', 'm', 'dl'])
libs.append('uuid')

env = Environment(CC = cc, CXX = cxx)
env.Append(CCFLAGS = ccflags)
env.Append(CPPPATH = cpath)
env.Append(LIBPATH = libpath)
env.Append(LIBS = libs)

sources = ['io.cpp', 'stitcher.cpp', 'matchers.cpp', 'motion_estimators.cpp']
sources.extend(['memcached.cpp'])

#env.Program('stitcher', ['main.cpp', sources])

#env.Program('dicer', ['dicer-app.cpp', sources])
#env.Program('sizes', ['show-sizes.cpp', sources])

# Separate environment for the storm proxy code.
storm_files = ['StormStitcher.cpp', 'StormWrapper.cpp']
env = Environment(CC = cc, CXX = cxx)
env.Append(CCFLAGS = ccflags)
env.Append(CPPPATH = cpath)
env.Append(CPPPATH = ['/usr/include/jsoncpp/'])
env.Append(LIBPATH = libpath)
env.Append(LIBS = ['jsoncpp', 'memcached'])
env.Program('stormstitcher', storm_files)

